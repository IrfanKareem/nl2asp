{"version": 1.0, "name": "NL2CNL test", "pairs": [{"CNL": "A node goes from 1 to 6.", "NL": "A graph has six nodes."}, {"CNL": "Node 1 is adjacent to node X, where X is one of 2, 5.", "NL": "A node 1 lies adjacent to a node X, where X is either 2 or 5."}, {"CNL": "Node 2 is adjacent to node X, where X is one of 3, 5.", "NL": "A node 2 lies adjacent to a node X, where X is either 3 or 5."}, {"CNL": "Node 3 is adjacent to Node 4.", "NL": "Node 2 and node 4 are adjacent."}, {"CNL": "Node 4 is adjacent to Node 5.", "NL": "Node 4 and node 5 are adjacent."}, {"CNL": "Node 6 is adjacent to Node 4.", "NL": "Node 6 and node 5 are adjacent."}, {"CNL": "Node X is uconnected to Node Y when node X is adjacent to node Y, where X is less than Y. ", "NL": "If node X is adjacent to node Y, and X is less than Y, then node X is unconnected from node Y."}, {"CNL": "Node Y is uconnected to Node X when node X is adjacent to node Y, where Y is less than X. ", "NL": "If node X is adjacent to node Y, and Y is less than X, then node Y is unconnected from node X."}, {"CNL": "Every node can be a clique.", "NL": "Every node can be a member of a clique."}, {"CNL": "It is required that when node X is not uconnected to node Y then node X is not clique  and also node Y is not clique, where X is less than Y.", "NL": "If nodes X and Y are not uconnected, node X cannot be a clique, and node Y cannot be a clique, because X is less than Y."}, {"CNL": "It is preferred with high priority that the number of nodes that are clique is maximized.", "NL": "The goal is to maximize the number of nodes in a clique with high priority."}, {"CNL": "Node 1 have an edge node X, where X is one of 2, 5.", "NL": "The node 1 has an edge with node X, where X can be 2 or 5."}, {"CNL": "Node 2 have an edge node X, where X is one of 3, 5.", "NL": "There's an edge between node 2 and node X, where X is either 3 or 5."}, {"CNL": "Node 3 have an edge Node 4.", "NL": "Node 3 has an edge with node 4."}, {"CNL": "Node 4 have an edge Node 5.", "NL": "Node 5 has an edge with node 5."}, {"CNL": "Node 4 have an edge Node 6.", "NL": "Node 4 has an edge with node 6."}, {"CNL": "Node X is uedge Node Y when node X have an edge node Y, where X is less than Y. ", "NL": "There is a condition under which node X is uedged from node Y, if X is less than Y, and Y is edged to node X."}, {"CNL": "Node Y is uedge Node X when node X have an edge node Y, where Y is less than X. ", "NL": "There is a condition under which node Y is uedged from node X, if Y is less than X, and X is edged to node Y."}, {"CNL": "It is prohibited that when node X is not uedge node Y then node X is clique  and also node Y is clique, where X is less than Y.", "NL": "If nodes X and Y are not undirected, node X can be in a clique and node Y can be in a clique, where X is less than Y."}, {"CNL": "A node goes from 1 to 3.", "NL": "Suppose a graph is made up of three nodes."}, {"CNL": "Node 1 is link to Node U, where U is one of 2, 3.", "NL": "Node 1 has a connection to node X, where X could be either 2 or 3."}, {"CNL": "Node 2 is link to Node U, where U is one of 1, 3.", "NL": "Node 2 is connected to node X, where X could represent 1 or 3."}, {"CNL": "Node 3 is link to Node U, where U is one of 1, 2.", "NL": "There's a connection from node 3 to node X, with X being 1 or 2."}, {"CNL": "A color is one of red, green, blue.", "NL": "We have red, green, and blue as the color choices."}, {"CNL": "Every node can be assigned to exactly 1 color.", "NL": "The stipulation is that if node U links with node V, both U and V should not be associated with color C, given U is smaller than V."}, {"CNL": "Node 1 have link  Node U, where U is one of 2, 3.", "NL": "There is a link between node 1 and node U, where U is either 2 or 3."}, {"CNL": "Node 2 have link  Node U, where U is one of 1, 3.", "NL": "There is a link between node 2 and node U, where U is either 1 or 3."}, {"CNL": "Node 3 have link  Node U, where U is one of 1, 2.", "NL": "There is a link between node 3 and node U, where U is either 1 or 2."}, {"CNL": "A color is one of green, red, yellow.", "NL": "The graph node has three available colors: red, green and blue."}, {"CNL": "It is prohibited that when node U is link node V then node U is link color C and also node V is link color C, where U is less than V.", "NL": "The prohibition is that when node U links to node V, node U is also linked to color C, and node V is also linked to color C, if U is less than V."}, {"CNL": "A Vtx goes from 1 to 8.", "NL": "Consider a set that contains eight vertex points."}, {"CNL": "Vtx 8 have an edge to Vtx X, where X is one of 1, 4, 5, 7.", "NL": "Vertex 8 has an edge to vertex X, X being one of 1, 2, 5 or 7."}, {"CNL": "Vtx 7 have an edge to Vtx X, where X is one of 1, 4, 5.", "NL": "Vertex 7 has an edge to vertex X, X being one of 1, 2 or 5."}, {"CNL": "Vtx 6 have an edge to Vtx X, where X is one of 1, 2, 4, 7.", "NL": "Vertex 6 has an edge to vertex X, X being one of 1, 2, 4 or 7."}, {"CNL": "Vtx 5 have an edge to Vtx X, where X is one of 2, 4.", "NL": "Vertex 5 has an edge to vertex X, X being one of 2 or 4."}, {"CNL": "Vtx 4 have an edge to Vtx 2.", "NL": "There is an edge between vertex 4 and vertex 2."}, {"CNL": "Vtx 3 have an edge to Vtx X, where X is one of 1, 4, 5, 7.", "NL": "Vertex 3 has an edge to vertex X, X being one of 1, 4, 5 or 7."}, {"CNL": "Vtx 2 have an edge to Vtx 8.", "NL": "There is an edge between vertex 2 and vertex 8."}, {"CNL": "Vtx 1 have an edge to Vtx 5.", "NL": "There is an edge between vertex 1 and vertex 5."}, {"CNL": "3 is Bound.", "NL": "The number 3 is bound."}, {"CNL": "Every vtx can be a dom.", "NL": "A dom can have every vertex."}, {"CNL": "Vtx U have an uedge to Vtx V when Vtx U have an edge to V, where U is less than V. ", "NL": "There is a condition in which node U is edged from node V when U is less than V and U is edged from node V."}, {"CNL": "Vtx U have an uedge to Vtx V when Vtx V have an edge to U, where U is less than V. ", "NL": "A condition exists in which node U is uedged from node V when V is edged from U and node U is less than node V."}, {"CNL": "Vtx V is considered when Vtx U have an uedge to V and also Vtx U is dom.", "NL": "Vertex V is considered when vertex U has an edge to vertex V, and when vertex U dominates."}, {"CNL": "Vtx V is considered when Vtx V have an uedge to U and also Vtx U is dom.", "NL": "Vertex V is considered when vertex V has an uedge to vertex U, and when vertex U dominates."}, {"CNL": "Vtx V is considered when Vtx V is dom.", "NL": "When Vertex V dominates, it is taken into consideration."}, {"CNL": "Vtx U have an used_edge to Vtx V when Vtx U is dom and also Vtx V is dom and also Vtx U have an uedge to V.", "NL": "When vertex U is dominant, there's a used_edge between vertex U and vertex V, and when vertex U is dominant, there's a uedge."}, {"CNL": "Vtx U have an used_edge to Vtx V when Vtx U is dom and also Vtx V is dom and also Vtx V have an uedge to U.", "NL": "There's a used_edge between vertex U and vertex V when vertex U is dominant, and a uedge between vertex V and vertex U when vertex U is dominant."}, {"CNL": "Vtx U reach Vtx V when Vtx U have an used_edge to V.", "NL": "When the vertex U has a used_edge to the vertex V, it reaches the vertex V."}, {"CNL": "Vtx U reach Vtx V when Vtx U have an used_edge to Z and also Vtx Z reach Vtx V, where U is different from V.", "NL": "Vertex U reaches vertex V when it has a used_edge to Z, and vertex Z reaches vertex V when it is not equal to U."}, {"CNL": "Vtx V is reached when Vtx U reach Vtx V.", "NL": "When the vertex U reaches the vertex V, the vertex V is reached."}, {"CNL": "It is required that when Vtx U is not reached then Vtx U is not dom.", "NL": "It is necessary that vertex U is dominant when vertex U is not reached."}, {"CNL": "It is required that when vtx U is not considered then vtx U is not vtx.\n", "NL": "In the case where vertex U is not considered, vertex U is taken as the vertex."}, {"CNL": "It is required that every vtx U is considered.", "NL": "Each vertex U of the graph is not taken into account."}, {"CNL": "It is required that the number of vtxs that are a dom with id U is less than or equal to K1, such that there is a vtx U, whenever there is a bound with id K1.\n", "NL": "The number of vertexes that are dominant with id U must be less than or equal to K1 so that a vertex U is present whenever there is a bound with id K1."}, {"CNL": "It is required that the number of id U of dom is less than or equal to K1, such that there is a vtx U, whenever there is a bound with value K1.", "NL": "In the case of a bound with a value of K1, the number of dominant ids U must be less than or equal to K1, i.e. a vertex U must exist."}, {"CNL": "It is prohibited that when vtx U is dom then vtx U is not reached.", "NL": "When vertex U is dominant, the reachability of vertex U is prohibited."}, {"CNL": "It is prohibited that when vtx U is Vtx then vtx U is not In.", "NL": "It is forbidden that vertex U is not Inn if it is the vertex"}, {"CNL": "A Vtx goes from 1 to 4.\n", "NL": "Let's suppose a cycle has four vertices."}, {"CNL": "4 is bound.", "NL": "The number 4 is bound."}, {"CNL": "Vtx 1 have an edge to Vtx X, where X is one of 2, 4.", "NL": "Vertex 1 and vertex X share an edge, where X can be either 2, 4."}, {"CNL": "Vtx 3 have an edge to Vtx 2.", "NL": "The vertex 3 and the vertex 2 have an edge."}, {"CNL": "Vtx 4 have an edge to Vtx 3.", "NL": "The vertex 4 and the vertex 3 have an edge."}, {"CNL": "Vtx X have an arc to Vtx Y when Vtx X have an edge to Y.", "NL": "An arc connects the vertex X to the vertex Y, whereas an edge connects the vertex X to the vertex Y."}, {"CNL": "Vtx Y have an arc to Vtx X when Vtx X have an edge to Y.", "NL": "An arc connects the vertex Y to the vertex X, whereas an edge connects the vertex Y to the vertex X."}, {"CNL": "Whenever there is a arc with first vtx X, with second vtx Y, whenever there is a bound with first vtx X, then we must have a in_hm with id1 X, with id2 Y or out_hm with first vtx X, with second vtx Y.", "NL": "An arc with first vertex X and second vertex Y, a bound with first vertex X, requires either an in_hm containing first vertex X and second vertex Y, or an out_hm containing first vertex X and second vertex Y."}, {"CNL": "Whenever there is a arc with first vtx X, with second vtx Y, whenever there is a reached with first vtx X, then we must have a in_hm with id1 X, with id2 Y or out_hm with first vtx X, with second vtx Y.", "NL": "An arc with first vertex X and second vertex Y, a reached with first vertex X, requires either an in_hm containing first vertex X and second vertex Y, or an out_hm containing first vertex X and second vertex Y."}, {"CNL": "Whenever there is an in_hm with id2 Y then we must have a reached with value Y.", "NL": "Whenever an in_hm is encountered with the id Y, there must be a vertex with the id Y."}, {"CNL": "It is prohibited that the number of id2 Y of in_hm with id1 X, with id2 Y is different from 1, whenever there is a vtx X.", "NL": "There is a restriction that the number of id Y of in_hm with id X and id Y may differ from 1 whenever there is a vertex X in the cycle as well."}, {"CNL": "It is prohibited that the number of id1 X of in_hm with id1 X, with id2 Y is different from 1, whenever there is a vtx Y.", "NL": "There is a restriction that the number of id X of in_hm with id X and id Y may differ from 1 whenever there is a vertex Y in the cycle as well."}, {"CNL": "It is required that when Vtx X is not reached then Vtx X is not vtx.", "NL": "In the case that vertex X cannot be reached, then vertex X must be the vertex."}, {"CNL": "Whenever there is a in_hm with id1 X, with id2 Y, whenever there is an edge with first vtx X, with second vtx Y, then we must have a hc with first vtx X, with second vtx Y.", "NL": "An in_hm with id X, with id Y, must have a hc with first vertex X, with second vertex Y whenever there is an edge with first vertex X, with second vertex Y."}, {"CNL": "Whenever there is a in_hm with id1 Y, with id2 X, whenever there is an edge with first vtx X, with second vtx Y, then we must have a hc with first vtx X, with second vtx Y.", "NL": "An in_hm with id Y, with id X, must have a hc with first vertex X, with second vertex Y whenever there is an edge with first vertex X, with second vertex Y."}, {"CNL": "vtx X have a hc vtx Y when vtx X have a in_hm vtx Y and also vtx X have a edge vtx Y.", "NL": "There is a HC vertex Y when the vertex X has an in_hm vertex Y, as well as when the vertex X has an edge vertex Y."}, {"CNL": "vtx X have a hc vtx Y when vtx Y have a in_hm vtx X and also vtx X have a edge vtx Y.", "NL": "There is a HC vertex X when the vertex Y has an in_hm vertex X, as well as when the vertex X has an edge vertex Y."}, {"CNL": "A Vtx goes from 1 to 4.\n", "NL": "Consider a path with four vertex."}, {"CNL": "4 is bound.", "NL": "The number 4 has a bound."}, {"CNL": "10 is maxweight.", "NL": "10 is the maximum weight."}, {"CNL": "Vtx 1 have an edge to Vtx X, where X is one of 2, 4.", "NL": "Vertex 1 has an edge with vertex X, where X can be either 2 or 4."}, {"CNL": "Vtx 3 have an edge to Vtx 2.", "NL": "Vertex 3 and vertex 2 have an edge."}, {"CNL": "Vtx 4 have an edge to Vtx 3.", "NL": "Vertex 4 and vertex 3 have an edge."}, {"CNL": "Vtx 1 have an edgewt to Vtx 2 and weight 2.", "NL": "The edgewt between vertex 1 and vertex 2 is 2."}, {"CNL": "Vtx 2 have an edgewt to Vtx 1 and weight 2.", "NL": "The edgewt between vertex 2 and vertex 1 is 2."}, {"CNL": "Vtx 2 have an edgewt to Vtx 3 and weight 3.", "NL": "The edgewt between vertex 2 and vertex three is 3."}, {"CNL": "Vtx 3 have an edgewt to Vtx 2 and weight 3.", "NL": "An edge weight of 3 exists between vertex 3 and vertex 2."}, {"CNL": "Vtx 3 have an edgewt to Vtx 4 and weight 1.", "NL": "An edge weight of 1 exists between vertex 3 and vertex 4."}, {"CNL": "Vtx 4 have an edgewt to Vtx 3 and weight 1.", "NL": "An edge weight of 1 exists between vertex 4 and vertex 3."}, {"CNL": "Vtx 1 have an edgewt to Vtx 4 and weight 3.", "NL": "An edge weight of 3 exists between vertex 1 and vertex 4."}, {"CNL": "Vtx 4 have an edgewt to Vtx 1 and weight 3.", "NL": "An edge weight of 3 exists between vertex 4 and vertex 1."}, {"CNL": "Vtx 4 have an edgewt to Vtx 1 and weight 3.", "NL": "An edge weight of 3 exists between vertex 4 and vertex 1."}, {"CNL": "Vtx X have an arc to Vtx Y when Vtx X have an edge to Y.", "NL": "An arc connects the vertex X to the vertex Y, and an edge connects the vertex X to the vertex Y."}, {"CNL": "Vtx Y have an arc to Vtx X when Vtx X have an edge to Y.", "NL": "In this case, vertex Y is connected to vertex X by an arc, while vertex X is connected to vertex Y by an edge."}, {"CNL": "Whenever there is a arc with first vtx X, with second vtx Y, whenever there is a bound with first vtx X, then we must have a in_hm with id1 X, with id2 Y or out_hm with first vtx X, with second vtx Y.", "NL": "Every time there is an arc with first vtx X and second vtx Y, every time there is a bound with first vtx X, then we must have a in_hm with id1 X and id2 Y or an out_hm with first vtx X and second vtx Y."}, {"CNL": "Whenever there is a arc with first vtx X, with second vtx Y, whenever there is a reached with first vtx X, then we must have a in_hm with id1 X, with id2 Y or out_hm with first vtx X, with second vtx Y.", "NL": "An arc with first vertex X and second vertex Y, as well as a reached with first vertex X, require either an in_hm with id X and id Y or an out_hm with first vertex X and second vertex Y."}, {"CNL": "Whenever there is an in_hm with id2 Y then we must have a reached with value Y.", "NL": "There must be an reached with id Y at vertex Y whenever there is an in_hm with id Y."}, {"CNL": "It is prohibited that the number of id2 Y of in_hm with id1 X, with id2 Y is different from 1, whenever there is a vtx X.", "NL": "There is a restriction that the number of id Y of in_hm with id X and id Y may differ from 1 whenever there is a vertex X in the cycle as well."}, {"CNL": "It is prohibited that the number of id1 X of in_hm with id1 X, with id2 Y is different from 1, whenever there is a vtx Y.", "NL": "There is a restriction that the number of id X of in_hm with id X and id Y may differ from 1 whenever there is a vertex Y in the cycle as well."}, {"CNL": "It is required that when Vtx X is not reached then Vtx X is not vtx.", "NL": "The requirement is that vertex X is the vertex when vertex X cannot be reached."}, {"CNL": "Whenever there is a in_hm with id1 X, with id2 Y, whenever there is an edge with first vtx X, with second vtx Y, then we must have a hc with first vtx X, with second vtx Y.", "NL": "An in_hm with id X, with id Y, must have a hc with first vertex X, with second vertex Y whenever there is an edge with first vertex X, with second vertex Y."}, {"CNL": "Whenever there is a in_hm with id2 Y, with second vtx X, whenever there is an edge with first vtx X, with second vtx Y, then we must have a hc with first vtx X, with second vtx Y.", "NL": "An in_hm with id Y, with id X, must have a hc with first vertex X, with second vertex Y whenever there is an edge with first vertex X, with second vertex Y."}, {"CNL": "vtx X have a hc vtx Y when vtx X have a in_hm vtx Y and also vtx X have a edge vtx Y.", "NL": "A vertex X can have a HC vertex Y when it has an in_hm vertex Y and also when it has an edge vertex Y."}, {"CNL": "vtx X have a hc vtx Y when vtx Y have a in_hm vtx X and also vtx X have a edge vtx Y.", "NL": "HC vertex Y exists when the vertex Y has an in_hm vertex X and also when the vertex X has an edge vertex Y."}, {"CNL": "It is required that the total of id X of hc with value X, with id Y is less than or equal to M, such that there is a edgewt with first vtx X, with second vtx Y, with third weight W, whenever there is a maxweight with value M.", "NL": "When there is a maxweight value M, there must be a number of ids X of HC with values X and Y less than or equal to M, such that there is an edgewt with the first vertex X, the second vertex Y, and the third weight W."}, {"CNL": "A vertex goes from 1 to 4.\n \n", "NL": "Connecting the four vertices forms the path that is unique to a hamiltonian cycle."}, {"CNL": "1 is start.", "NL": "The number one is the beginning of the path."}, {"CNL": "Vertex 1 have an edge to Vertex X, where X is one of 2, 4.", "NL": "Vertex 1 and vertex X are connected by an edge, where X may be either 2 or 4."}, {"CNL": "Vertex 3 have an edge to Vertex 2.", "NL": "The vertex 3 and the vertex 2 share an edge."}, {"CNL": "Vertex 4 have an edge to Vertex 3.", "NL": "The vertex 4 and the vertex 3 share an edge."}, {"CNL": "Whenever there is a start with node X, whenever there is an edge with first node X, and with second node Y, whenever there is not an outpath with first node X, and with second node Y, then there must be an inpath with first node X, and with second node Y.\n", "NL": "Node X is the start point, node X has an edge, and node Y has an edge, and if no outpath with first node X is present, and no outpath with second node Y is present, there must be an inpath with first node X and with second node Y."}, {"CNL": "Whenever there is a start with node X, whenever there is an edge with first node X, and with second node Y, whenever there is not an inpath with first node X, and with second node Y, then there must be an outpath with first node X, and with second node Y.", "NL": "Node X must have a start point, an edge with first node X, and an edge with second node Y, and even if there is no inpath with first node X, and no inpath with second node Y, there must be an outpath with first node X, and with second node Y."}, {"CNL": "Whenever there is a reached with node X, whenever there is an edge with first node X, and with second node Y, whenever there is not an outpath with first node X, and with second node Y, then there must be an inpath with first node X, and with second node Y.\n", "NL": "The reached point needs to be associated with node X, and the edge with node Y needs to be associated with node X, and even when there is no outpath associated with first node X, and with second node Y, there needs to be an inpath associated with first node X, and with second node Y."}, {"CNL": "Whenever there is a reached with node X, whenever there is an edge with first node X, and with second node Y, whenever there is not an inpath with first node X, and with second node Y, then there must be an outpath with first node X, and with second node Y.", "NL": "In addition to the reached points with node X, an edge with first node X, as well as an edge with second node Y must be present, and if no in paths are present with first node X and second node Y, there must be an out path with first node X and second node Y."}, {"CNL": "edge X have an inPath to edge Y when node X is start and also node X have an edge to Y and also edge X have not outpath edge Y.", "NL": "When node X is started, there is an inpath from edge X to edge Y, and there is an edge from X to edge Y, but there is no outpath."}, {"CNL": "edge X have an outPath to edge Y when node X is start and also node X have an edge to Y and also edge X have not inpath edge Y.", "NL": "Node X has an outpath from edge X to edge Y when it is started, and it also has an edge from X to edge Y, but there is no inpath."}, {"CNL": "edge X have an inPath to edge Y when node X is reached and also node X have an edge to Y and also edge X have not outPath edge Y.", "NL": "Upon reaching node X, there is an inpath from edge X to edge Y, and there is also an edge from X to edge Y, however, there is no outpath from edge X to edge Y."}, {"CNL": "edge X have an outPath to edge Y when node X is reached and also node X have an edge to Y and also edge X have not inpath edge Y.\n", "NL": "When node X is reached, there is an outpath from edge X to edge Y, and there is also an edge from edge X to edge Y, but there is no inpath from edge X to edge Y."}, {"CNL": "It is required that Y is equal to Y1, whenever there is an inpath with first node X, and with second node Y, whenever there is an inpath with first node X, and with second node Y1.", "NL": "A requirement is that Y cannot equal Y1, whenever there is an inpath with the first node X, and with the second node Y1, whenever there is an inpath with the first node X, and with the second node Y."}, {"CNL": "It is required that X is equal to X1, whenever there is an inpath with first node X, and with second node Y, whenever there is an inpath with first node X1, and with second node Y.", "NL": "In order for X to be equal to X1, there must be an inpath from the first node X to the second node Y, as well as an inpath from the first node X to the second node Y1."}, {"CNL": "It is prohibited that there is a vertex with node X, whenever there is not a reached with node X, whenever there is not a start with node X.", "NL": "Whenever there is no reached with node X, whenever there is no start with node X, a vertex with node X is prohibited."}, {"CNL": "Whenever there is an inpath with second node X, then there must be a reached with node X.", "NL": "When there is an inpath with a second node X, a reached node X must be present."}, {"CNL": "Vtx X is reached when Vtx Dummy have an inpath vtx X.", "NL": "As long as the vertex Dummy has an inpath to the vertex X, the vertex X can be reached."}, {"CNL": "A Vtx goes from 1 to 8.\n", "NL": "Consider a cluster with eight vertex points."}, {"CNL": "Vtx 8 have an edge to Vtx X, where X is one of 1, 5, 6.", "NL": "The vertex 8 has an edge over the vertex X, where X is either 1, 5, or 6."}, {"CNL": "Vtx 7 have an edge to Vtx X, where X is one of 6, 5, 4.", "NL": "The vertex 7 has an edge over the vertex X, where X is either 6, 5, or 4."}, {"CNL": "Vtx 6 have an edge to Vtx X, where X is one of 5, 1.", "NL": "There's an edge to vertex 6 over vertex X, where X is one of the 5 and 1."}, {"CNL": "Vtx 3 have an edge to Vtx X, where X is one of 5, 1.", "NL": "There's an edge to vertex 3 over vertex X, where X is one of the 5 and 1."}, {"CNL": "Vtx 5 have an edge to Vtx X, where X is one of 2, 1.", "NL": "There's an edge to vertex 5 over vertex X, where X is one of the 2 and 1."}, {"CNL": "Vtx 4 have an edge to Vtx 2.", "NL": "There is an edge between vertex 4 and vertex 2."}, {"CNL": "2 is bound.", "NL": "2 has a bound."}, {"CNL": "A levels goes from 1 to 3.", "NL": "There are three levels."}, {"CNL": "Vtx U have an uedge to Vtx V when Vtx U have an edge to V, where U is less than V. ", "NL": "In the case of node U being edge to node V when U less than V, then it is uedge from node V."}, {"CNL": "Vtx U have an uedge to Vtx V when Vtx V have an edge to U, where U is less than V. ", "NL": "In a situation in which node V is edge to node U, and U is less than V, node U is uedge from node V."}, {"CNL": "whenever there is a vtx U then we can have levelvtx with value L, and with id U exactly 1 level L.\n", "NL": "There will always be a level vertex with value L, with a vertex id U of exactly one level L, if there is a vertex U at all."}, {"CNL": "Whenever there is a levelvtx with value L greater than 1, with id U, then we can have exactly 1 parentedge with first id P, with second id U such that there is a uedge with first id P, with second id U,\nor a parentedge with first id P, with second id U such that there is an uedge with first id U, with second id P.\n", "NL": "If a levelvtx has a value L greater than 1, and its id is U, then there is exactly one parentedge with first id P, second id U, such that there is an uedge with first id P, second id U, or there could be a parentedge with first id P, with second id U, so that there will be a uedge with first id U, with second id P."}, {"CNL": "It is required that there is a levelvtx with value L-1, and with id P, whenever there is an parentedge with first id P, and with second id V, whenever there is a levelvtx with value L, and with id V.", "NL": "It must be satisfied that there is a levelvtx with value L-1, and with id P, whenever there is a parentedge with first id P, and with second id V, whenever there is a levelvtx with value L, and with id V."}, {"CNL": "It is required that the number of second id U of parentedge with first id P, with second id U is less than or equal to B, such that there is a vtx U, whenever there is a bound with value B, whenever there is a vtx P.", "NL": "It is known that the number of second ids U on the parentedge with first id P, with second id U, is either less than or equal to B, which means that whenever there is a bound with value B, whenever there is a vtx P, there is also a vtx U."}, {"CNL": "It is required that the number of id U of levelvtx with value equal to 1, with id U is less than or equal to B, such that there is a vtx U, whenever there is a bound with value B.\n", "NL": "It is required that not all of the id U of the levelvtx have a value of 1, and id U is less than or equal to B, when there is a vtx U with a bound value of B."}, {"CNL": "It is required that V is less than or equal to U, whenever there is an parentedge with first id P, and with second id V, whenever there is an parentedge with first id P, and with second id U, whenever there is not uedge with first id U, and with second id V.\n", "NL": "In the case that there are parentedges with id P and id V, as well as parentedges with id P and id U and there is no uedge with id U and id V, satisfying id U is always less than id V."}, {"CNL": "It is required that V is less than or equal to U, whenever there is an Levelvtx with value equal to 1, and with id V, whenever there is an Levelvtx with value equal to 1, and with id U, whenever there is not uedge with first id U, and with second id V. ", "NL": "The requirement is that whenever there is a levelvtx with value 1 and with id V, and also a levelvtx with value 1 and id U, when there is no uedge with id U and id V, satisfying id U must always be less than id V."}, {"CNL": "A Vtx goes from 1 to 8.\n", "NL": "A partition has eight vertex."}, {"CNL": "Vtx 1 have an edge to Vtx X, where X is one of 2, 4, 5.", "NL": "In addition to the edge between vertex 1 and vertex 2, there is also an edge between vertex 4 and vertex 5."}, {"CNL": "Vtx 2 have an edge to Vtx X, where X is one of 3, 5.", "NL": "Vertex 2 and vertex 3 are connected by an edge, as is vertex 5."}, {"CNL": "Vtx 3 have an edge to Vtx 1.", "NL": "Vertex 3 and vertex 1 have an edge."}, {"CNL": "Vtx 4 have an edge to Vtx X, where X is one of 2, 3, 5.", "NL": "The vertex 4 and vertex 2, as well as the other vertices 3 and 5, have edges."}, {"CNL": "Vtx 5 have an edge to Vtx 3.", "NL": "Between vertex 5 and vertex 3, there is an edge."}, {"CNL": "A parts goes from 1 to 3.", "NL": "Consider that there are three parts."}, {"CNL": "3 is vtxbound.", "NL": "A vtxbound is set to 3 in the code."}, {"CNL": "4 is edgebound.", "NL": "In this case, the edgebound is number four."}, {"CNL": "Vtx U have an uedge to Vtx V when Vtx U have an edge to V, where U is less than V. ", "NL": "In the case where node U is edge to node V, then U is less than V, then U is uedge from node V."}, {"CNL": "Vtx U have an uedge to Vtx V when Vtx V have an edge to U, where U is less than V. ", "NL": "Node U is uedge from node V when node V is edge to node U, and U is less than V."}, {"CNL": "Whenever there is a uedge with id1 U, with id2 V, whenever there is an weight_edgewt with first vtx U, with second vtx V, with third weight W, then we must have a u_edge with id1 U, with id2 V, with id3 W.", "NL": "When there's an uedge with id U, with id V, whenever there's an edge_weight with third weight W, with first vertex U, with second vertex V, there must be an uedge with id U, with id V, with weight W."}, {"CNL": "Whenever there is a uedge with id1 U, with id2 V, whenever there is an weight_edgewt with first vtx V, with second vtx U, with third weight W, then we must have a u_edge with id1 U, with id2 V, with id3 W.", "NL": "When there is an undirected edge with id U and id V, and when there is an edge weight with weight W, with first vertex V, and with second vertex U, it is also necessary for there to be an undirected edge with id U, with id V, and with weight W."}, {"CNL": "vtx U have a u_edge vtx V and vtx W when vtx U have uedge vtx V and also vtx U have weight_wtedge vtx V and vtx W.", "NL": "Vertex U have an uedge vertex V and weight W when vertex U have an uedge vertex V and also vertex U have a weight_wtedge vertex V and weight W."}, {"CNL": "vtx U have a u_edge vtx V and vtx W when vtx U have uedge vtx V and also vtx V have weight_wtedge vtx U and vtx W.", "NL": "When vertex U has an uedge vertex V and weight W and vertex V has a weight_wtedge vertex U and weight W, vertex U has an uedge vertex V."}, {"CNL": "Whenever there is a part with value K, whenever there is a vtxbound with value V, then we can have between 1 and V partition with value U, and with id K such that there is a vtx U.\n", "NL": "As long as there are parts K and vtxbound V, we can always have a partition with value U and value K ranging between 1 and V."}, {"CNL": "Whenever there is a vtx U, then we can have exactly 1 partition with value U, and with id K such that there is a part K.", "NL": "If there is a vertex U, there can always be a partition with value U and ID K equal to exactly 1 part K."}, {"CNL": "Whenever there is a part K, whenever there is a vtxbound with value V, then we can have between 1 and V partition with value U, and with id K such that there is a vtx U.", "NL": "The partition with values K and U ranging between 1 and V with vertex U can always be constructed whenever we have parts K and vertex bound V."}, {"CNL": "Every vtx U can be partition exactly 1 part K.", "NL": "For every vertex U that can be partitioned, there is precisely one part K."}, {"CNL": "Whenever there is a uedge with id1 U, with id2 V, whenever there is an partition with value U, with id  X,  whenever there is an partition with value V, with id  Y, and with id Y greater than X, then we must have a adjacent with id1 U, with id2 V, with id3 X, with id4 Y.", "NL": "In the event that there is an uedge with id U and id V, which has a partition with id U, with id X, and a partition with id V and with id Y, considering that X is less than Y, then there must be an adjacent with id U, id V, id X, and with id Y."}, {"CNL": "Whenever there is a uedge with id1 U, with id2 V, whenever there is an partition with value U, with id  Y,  whenever there is an partition with value V, with id  X, and with id X less than Y, then we must have a adjacent with id1 U, with id2 V, with id3 X, with id4 Y.", "NL": "An uedge with id U and id V, having a partition with id U, with id Y, and a partition with id V and with id X, when X is less than Y, must have an adjacent with id U, id V, id X, and with id Y."}, {"CNL": "Whenever there is a uedge with value U, with id V, whenever there is a reach with id1 K, with id2 U, whenever there is a partition with value V, with id K then we must have a reach with id1 K, with id2 V. ", "NL": "In the case of a uedge with id U and id V, with a reach with id K, with id U and a partition with id V and with id X, a reach with id K and id V must be present."}, {"CNL": "Whenever there is a uedge with value V, with id U, whenever there is a reach with id1 K, with id2 U, whenever there is a partition with value V, with id K then we must have a reach with id1 K, with id2 V. ", "NL": "When there is an uedge with id V and id U, a reach with id K, with id U, and a partition with id V and with id X, then we need to have a reach with id K, id V."}, {"CNL": "vtx K have a reach vtx V when vtx U uedge vtx V and also vtx K reach vtx U and also vtx V partition vtx K.", "NL": "The vertex K reaches the vertex V when the vertex U has a uedge vertex V and there is a reach between vertex K and vertex U, as well as a partition between vertex V and vertex K."}, {"CNL": "vtx K have a reach vtx V when vtx V uedge vtx U and also vtx K reach vtx U and also vtx V partition vtx K.", "NL": "The vertex K reaches the vertex V when vertex V has a uedge vertex U and there are a reach between vertex K and vertex U as well as a partition between vertex V and vertex K."}, {"CNL": "It is required that there is a reach with id1 K, and with id2 U, whenever there is a partition with value U, and with id K.\n", "NL": "This prohibits the existence of partitions with ids U and K, as well as no reaches with values K and U."}, {"CNL": "whenever there is an partition with value U, with id K, whenever there is an partition with value V, with id K, whenever there is an vtx with id V, and with id V less than U, then we must have a existsless with id1 U, with id2 K.", "NL": "If there is a partition with U and K, and another partition with V and K, then, given that V is less than U, then we must have an existless with U, K."}, {"CNL": "whenever there is an partition with value U, with id K, whenever there is not an existsless with id1 U, with id2 K, then we must have a reach with id1 K, and with id2 U.\n", "NL": "Whenever a partition has value U and id K that does not exist with id1 U and id2 K, then we must have a reach with the id1 K and the id2 U."}, {"CNL": "Whenever there is a uedge with value U, with id V, whenever there is a reach with id1 K, with id2 U, whenever there is a partition with value V, with id K then we must have a reach with id1 K, with id2 V. ", "NL": "The uedge has a value U and an id V, has a reach with id1 K, with id2 U, and has a partition with value V and with id K, therefore we must also have a reach with id1 K and id2 V."}, {"CNL": "Whenever there is a uedge with value V, with id U, whenever there is a reach with id1 K, with id2 U, whenever there is a partition with value V, with id K then we must have a reach with id1 K, with id2 V. ", "NL": "The uedge with value V and id U must have a reach with id 1 K, with id2 U, and partition with value V and with id K, in order to have a reach with id 1 K, id2 V."}, {"CNL": "vtx U have a existslesss vtx K when vtx U have a partition vtx K and also vtx V have a partition vtx K and also vtx V is Vtx, where V is less than U.", "NL": "Vertex U has an existless vertex K when it has a partition vertex K, but vertex V has a partition vertex K, but vertex V is Vtx where V is less than U."}, {"CNL": "vtx K have a reach vtx U when vtx U have a partition vtx K and also vtx U have a not existslesss vtx K.", "NL": "A reach exists between vertices U and K when vertices U and K are partitioned, as well as a not existing reach between vertices U and K."}, {"CNL": "vtx K have a reach vtx V when vtx U uedge vtx V and also vtx K reach vtx U and also vtx V partition vtx K.", "NL": "If vertex U has an uedge with vertex V, and there is a reach between vertex K and vertex U, as well as a partition between vertex V and vertex K, then vertex K reaches vertex V."}, {"CNL": "vtx K have a reach vtx V when vtx V uedge vtx U and also vtx K reach vtx U and also vtx V partition vtx K.", "NL": "The vertex K reaches the vertex V when vertex V has a uedge vertex U and there are a reach between vertex K and vertex U as well as a partition between vertex V and vertex K."}, {"CNL": "It is required that there is a reach with id1 K, and with id2 U, whenever there is a partition with value U, and with id K.\n", "NL": "It is prohibited that there is a partition with value U and with id K, and that there is no reach with id1 K and with id2 U."}, {"CNL": "A node goes from 1 to 4.", "NL": "The path consists of four nodes."}, {"CNL": "1 is start.", "NL": "The first number is the start."}, {"CNL": "Vtx 1 have an edge to Vtx 2 and weight 2.", "NL": "Vertex 1 and vertex 2 have an edge with a weight of 2."}, {"CNL": "Vtx 2 have an edge to Vtx 3 and weight 3.", "NL": "Vertex 2 and vertex 2 have an edge with a weight of 3."}, {"CNL": "Vtx 3 have an edge to Vtx 4 and weight 1.", "NL": "Vertex 3 and vertex 2 have an edge with a weight of 1."}, {"CNL": "Vtx 4 have an edge to Vtx 1 and weight 3.", "NL": "Vertex 4 and vertex 2 have an edge with a weight of 3."}, {"CNL": "Whenever there is an edge with first vtx X, with second vtx Y, then we must have a inPath with first vtx X, with second vtx Y or outPath  with first vtx X, with second vtx Y.", "NL": "Whenever an edge exists between vtx X and vtx Y, we must have an inPath between vtx X and vtx Y as well as an outPath between vtx X and vtx Y."}, {"CNL": "It is prohibited that there is an inPath with first vtx X, with second vtx Y1, whenever there is a inPath  with first vtx X, with second vtx Y different from Y1.", "NL": "As long as there is an inPath with first vertex X and second vertex Y, it is strictly prohibited to establish an inPath with first vertex X and second vertex Y1, where Y is not equal to Y1."}, {"CNL": "It is prohibited that there is an inPath  with first vtx X1 different from X, with second vtx Y, whenever there is a inPath with first vtx X, with second vtx Y.\n", "NL": "There is a prohibition on establishing an inPath with first vertex X and second vertex Y whenever there is an inPath with first vertex X1 and second vertex Y, which is not equal to X1."}, {"CNL": "It is required that there is reached with id X, whenever there is a node X.\n", "NL": "The requirement is that there is a node X that cannot be reached with the id X whenever a node X is present."}, {"CNL": "It is prohibited that there is a start Y, whenever there is a inPath with first vtx X, with second vtx Y.", "NL": "If there is an inPath between the first vtx X and the second vtx Y, the start Y should be prohibited."}, {"CNL": "node X is reached when node Y is reached and also node Y have an inPath node X.", "NL": "As soon as node Y is reached, node X is reached, and node Y has an inPath to node X as well."}, {"CNL": "node X is reached when node X have a start.", "NL": "Node X is reached after it has started."}, {"CNL": "It is preferred, with low priority, that whenever there is an inPath with first vtx X, with second vtx Y, whenever there is an edge with first vtx X, with second vtx Y, with third vtx C, C is minimized.", "NL": "There is a preference, though with a low priority, that whenever there is a inPath between the first vertex X and the second vertex Y, there is an edge between the first vertex X and the second vertex Y, with the third vertex C, the value of C is as small as possible."}, {"CNL": "A vertex is identified by a id.\nThere is a vertex with id A.", "NL": "This graph contains the vertex with the id A."}, {"CNL": "There is a vertex with id B.", "NL": "This graph contains the vertex with the id B."}, {"CNL": "There is a vertex with id C.", "NL": "This graph contains the vertex with the id C."}, {"CNL": "There is a vertex with id D.", "NL": "This graph contains the vertex with the id D."}, {"CNL": "There is a vertex with id E.", "NL": "This graph contains the vertex with the id E."}, {"CNL": "a vertex A have an edge to vertex B.", "NL": "A vertex A has an edge with a vertex B."}, {"CNL": "a vertex B have an edge to vertex C.", "NL": "A vertex B has an edge with a vertex C."}, {"CNL": "a vertex C have an edge to vertex D.", "NL": "A vertex C has an edge with a vertex D."}, {"CNL": "a vertex D have an edge to vertex E.", "NL": "A vertex D has an edge with a vertex E."}, {"CNL": "a vertex E have an edge to vertex A.", "NL": "A vertex E has an edge with a vertex A."}, {"CNL": "a vertex A have an edge to vertex E.", "NL": "A vertex A has an edge with a vertex E."}, {"CNL": "a vertex D have an edge to vertex A.", "NL": "A vertex D has an edge with a vertex A."}, {"CNL": "a vertex C have an edge to vertex E.", "NL": "A vertex C has an edge with a vertex E."}, {"CNL": "There is a Init with id A.", "NL": "It is feasible to locate an Init that has the identification A."}, {"CNL": "vertex V2 is No_In vertex V when vertex V1 is In vertex V and also vertex V2 is vertex, where V1 is different from V2.", "NL": "In the case where vertex V1 differs from vertex V2, and vertex V2 is in vertex V, then vertex V1 is not in vertex V."}, {"CNL": "vertex V is No_In vertex V2 when vertex V is In vertex V1 and also vertex V2 is vertex, where V1 is different from V2.", "NL": "When vertex V is in vertex V1 and vertex V2 is vertex, where V1 is different from V2, then vertex V is No_In vertex V2."}, {"CNL": "vertex V2 is reached when vertex V1 is Init and also vertex V1 is In vertex V2.", "NL": "When vertex V1 is initiated, and when vertex V1 is embedded in a vertex V2, a vertex V2 is reached."}, {"CNL": "vertex V2 is reached when vertex V1 is reached and also vertex V1 is In vertex V2.", "NL": "When vertex V1 is visited, vertex V2 is also visited, and when vertex V1 is within vertex V2."}, {"CNL": "vertex V is no_reached when vertex V is vertex and also vertex V is not reached.", "NL": "In the event that a vertex V is not reached as well as when a vertex V is a vertex, it is no_reached."}, {"CNL": "It is prohibited that there is no_reached with vertex X.", "NL": "There can't be a no_reach with vertex X."}, {"CNL": "whenever there is an edge with first vtx V1, with second vtx V2, then we must have an In with first vtx V1, with second vtx V2 or no_In with first vtx V1, and with second vtx V2.", "NL": "If there is an edge between the first vertex V1, and the second vertex V2, we must either have an In between the first vertex V1, and the second vertex V2, or we must have no_In between the first vertex V1, and the second vertex V2."}]}