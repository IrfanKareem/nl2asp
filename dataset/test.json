[
    {
        "CNL": "A node goes from 1 to 6.",
        "NL": "Assume that there are six nodes in a graph."
    },
    {
        "CNL": "Node 1 is adjacent to node X, where X is one of 2, 5.",
        "NL": "There is node 1 adjacent to node X, where X is one of the numbers 2 or  5."
    },
    {
        "CNL": "Node 2 is adjacent to node X, where X is one of 3, 5.",
        "NL": "There is node 2 adjacent to node X, where X is one of the numbers 3 or  5."
    },
    {
        "CNL": "Node 3 is adjacent to Node 4.",
        "NL": "There is node 2 adjacent to node 4."
    },
    {
        "CNL": "Node 4 is adjacent to Node 5.",
        "NL": "There is node 4 adjacent to node 5."
    },
    {
        "CNL": "Node 6 is adjacent to Node 4.",
        "NL": "There is node 6 adjacent to node 4."
    },
    {
        "CNL": "Node X is uconnected to Node Y when node X is adjacent to node Y, where X is less than Y. ",
        "NL": "There is a condition in which node X is unconnected from node Y when node X is adjacent to node Y, and X is less than Y."
    },
    {
        "CNL": "Node Y is uconnected to Node X when node X is adjacent to node Y, where Y is less than X. ",
        "NL": "There is a condition in which node Y is unconnected from node X when node X is adjacent to node Y, and Y is less than X."
    },
    {
        "CNL": "Every node can be a clique.",
        "NL": "It is possible for every node to be part of a clique."
    },
    {
        "CNL": "It is required that when node X is not uconnected to node Y then node X is not clique  and also node Y is not clique, where X is less than Y.",
        "NL": "In the case of nodes X and Y that are not uconnected, node X cannot be a clique and node Y cannot be a clique, where X is less than Y."
    },
    {
        "CNL": "It is preferred with high priority that the number of nodes that are clique is maximized.",
        "NL": "Maximizing the number of clique nodes is of high priority."
    },
    {
        "CNL": "Node 1 have an edge node X, where X is one of 2, 5.",
        "NL": "There is node 1 has an edge to node X, where X is one of the numbers 2 or 5."
    },
    {
        "CNL": "Node 2 have an edge node X, where X is one of 3, 5.",
        "NL": "There is node 2 has an edge to node X, where X is one of the numbers 3 or 5."
    },
    {
        "CNL": "Node 3 have an edge Node 4.",
        "NL": "There is node 3 has an edge to node 4."
    },
    {
        "CNL": "Node 4 have an edge Node 5.",
        "NL": "There is node 4 has an edge to node 5."
    },
    {
        "CNL": "Node 4 have an edge Node 6.",
        "NL": "There is node 4 has an edge to node 6."
    },
    {
        "CNL": "Node X is uedge Node Y when node X have an edge node Y, where X is less than Y. ",
        "NL": "There is a condition in which node X is uedge from node Y when node X is edge to node Y, and X is less than Y."
    },
    {
        "CNL": "Node Y is uedge Node X when node X have an edge node Y, where Y is less than X. ",
        "NL": "There is a condition in which node Y is uedge from node X when node X is edge to node Y, and Y is less than X."
    },
    {
        "CNL": "It is prohibited that when node X is not uedge node Y then node X is clique  and also node Y is clique, where X is less than Y.",
        "NL": "In the case of nodes X and Y that are not undirected, node X can be a clique and node Y can be a clique, where X is less than Y."
    },
    {
        "CNL": "A node goes from 1 to 3.",
        "NL": "Assume that there are three nodes in a graph."
    },
    {
        "CNL": "Node 1 is link to Node U, where U is one of 2, 3.",
        "NL": "There is node 1 has link to node X, where X is one of the numbers 2 or 3."
    },
    {
        "CNL": "Node 2 is link to Node U, where U is one of 1, 3.",
        "NL": "There is node 2 has link to node X, where X is one of the numbers 1 or 3."
    },
    {
        "CNL": "Node 3 is link to Node U, where U is one of 1, 2.",
        "NL": "There is node 3 has link to node X, where X is one of the numbers 1 or 2."
    },
    {
        "CNL": "A color is one of red, green, blue.",
        "NL": "The available colors are red, green and blue."
    },
    {
        "CNL": "Every node can be assigned to exactly 1 color.",
        "NL": "There can be only one color assigned to each node."
    },
    {
        "CNL": "Node 1 have link  Node U, where U is one of 2, 3.",
        "NL": "There is node 1 has an link to node U, where U is one of the numbers 2 or 3."
    },
    {
        "CNL": "Node 2 have link  Node U, where U is one of 1, 3.",
        "NL": "There is node 2 has an link to node U, where U is one of the numbers 1 or 3."
    },
    {
        "CNL": "Node 3 have link  Node U, where U is one of 1, 2.",
        "NL": "There is node 3 has an link to node U, where U is one of the numbers 1 or 2."
    },
    {
        "CNL": "A color is one of green, red, yellow.",
        "NL": "The available colors are red, green and blue."
    },
    {
        "CNL": "It is prohibited that when node U is link node V then node U is link color C and also node V is link color C, where U is less than V.",
        "NL": "There is a prohibition that when node U links to node V, node U is also linked to color C and node V is also linked to color C, where U is less than V."
    },
    {
        "CNL": "A Vtx goes from 1 to 8.",
        "NL": "Assume that there are eight vertex in a set."
    },
    {
        "CNL": "Vtx 8 have an edge to Vtx X, where X is one of 1, 4, 5, 7.",
        "NL": "There is a vertex 8 have an edge to vertex X, where X is one of numbers 1, 2, 5 and 7."
    },
    {
        "CNL": "Vtx 7 have an edge to Vtx X, where X is one of 1, 4, 5.",
        "NL": "There is a vertex 7 have an edge to vertex X, where X is one of numbers 1, 2, and 5."
    },
    {
        "CNL": "Vtx 6 have an edge to Vtx X, where X is one of 1, 2, 4, 7.",
        "NL": "There is a vertex 6 have an edge to vertex X, where X is one of numbers 1, 2, 4 and 7."
    },
    {
        "CNL": "Vtx 5 have an edge to Vtx X, where X is one of 2, 4.",
        "NL": "There is a vertex 5 have an edge to vertex X, where X is one of numbers 2 or 4."
    },
    {
        "CNL": "Vtx 4 have an edge to Vtx 2.",
        "NL": "There is a vertex 4 have an edge to vertex 2."
    },
    {
        "CNL": "Vtx 3 have an edge to Vtx X, where X is one of 1, 4, 5, 7.",
        "NL": "There is a vertex 3 have an edge to vertex X, where X is one of numbers 1, 4, 5 and 7."
    },
    {
        "CNL": "Vtx 2 have an edge to Vtx 8.",
        "NL": "There is a vertex 2 have an edge to vertex 8."
    },
    {
        "CNL": "Vtx 1 have an edge to Vtx 5.",
        "NL": "There is a vertex 1 have an edge to vertex 5."
    },
    {
        "CNL": "3 is Bound.",
        "NL": "There is a bound for number 3."
    },
    {
        "CNL": "Every vtx can be a dom.",
        "NL": "It is possible for every vertex to be part of a dom."
    },
    {
        "CNL": "Vtx U have an uedge to Vtx V when Vtx U have an edge to V, where U is less than V. ",
        "NL": "There is a condition in which node U is uedge from node V when node U is edge to node V, and U is less than V."
    },
    {
        "CNL": "Vtx U have an uedge to Vtx V when Vtx V have an edge to U, where U is less than V. ",
        "NL": "There is a condition in which node U is uedge from node V when node V is edge to node U, and U is less than V."
    },
    {
        "CNL": "Vtx V is considered when Vtx U have an uedge to V and also Vtx U is dom.",
        "NL": "A vertex V is considered when vertex U has an uedge to vertex V, and if vertex U is dominating."
    },
    {
        "CNL": "Vtx V is considered when Vtx V have an uedge to U and also Vtx U is dom.",
        "NL": "A vertex V is considered when vertex V has an uedge to vertex U, and if vertex U is dominating."
    },
    {
        "CNL": "Vtx V is considered when Vtx V is dom.",
        "NL": "Vertex V gets considered when it dominates."
    },
    {
        "CNL": "Vtx U have an used_edge to Vtx V when Vtx U is dom and also Vtx V is dom and also Vtx U have an uedge to V.",
        "NL": "A used_edge exists between vertex U and vertex V when vertex U is dominant, as well as an uedge between vertex U and vertex V when vertex U is dominant."
    },
    {
        "CNL": "Vtx U have an used_edge to Vtx V when Vtx U is dom and also Vtx V is dom and also Vtx V have an uedge to U.",
        "NL": "A used_edge exists between vertex U and vertex V when vertex U is dominant, as well as an uedge between vertex V and vertex U when vertex U is dominant."
    },
    {
        "CNL": "Vtx U reach Vtx V when Vtx U have an used_edge to V.",
        "NL": "The vertex U reaches the vertex V when the vertex U has a used_edge to the vertex V."
    },
    {
        "CNL": "Vtx U reach Vtx V when Vtx U have an used_edge to Z and also Vtx Z reach Vtx V, where U is different from V.",
        "NL": "The vertex U reaches a vertex V when a vertex U has a used_edge to Z and a vertex Z reaches a vertex V when U is not equal to V."
    },
    {
        "CNL": "Vtx V is reached when Vtx U reach Vtx V.",
        "NL": "The vertex V is reached when the vertex U reaches the vertex V."
    },
    {
        "CNL": "It is required that when Vtx U is not reached then Vtx U is not dom.",
        "NL": "There is a requirement that when vertex U is not reached, then vertex U is  dominant."
    },
    {
        "CNL": "It is required that when vtx U is not considered then vtx U is not vtx.",
        "NL": "There is a requirement that when vertex U is not considered, then vertex U is the vertex."
    },
    {
        "CNL": "It is required that every vtx U is considered.",
        "NL": "There is a requirement that every vertex U of the graph is not considered."
    },
    {
        "CNL": "It is required that the number of vtxs that are a dom with id U is less than or equal to K1, such that there is a vtx U, whenever there is a bound with id K1.",
        "NL": "The number of vertexes that is dominant with id U must be less than or equal to K1, such that there is a vertex U whenever there is a bound with id K1."
    },
    {
        "CNL": "It is required that the number of id U of dom is less than or equal to K1, such that there is a vtx U, whenever there is a bound with value K1.",
        "NL": "If there is a bound with value K1, the number of dominant ids U has to be less or equal to K1, i.e. there must be a vertex U."
    },
    {
        "CNL": "It is prohibited that when vtx U is dom then vtx U is not reached.",
        "NL": "There is a prohibition against not reaching vertex U when vertex U is dominant."
    },
    {
        "CNL": "It is prohibited that when vtx U is Vtx then vtx U is not In.",
        "NL": "There is a prohibition that vertex U is not Inn when vertex U is the vertex."
    },
    {
        "CNL": "A Vtx goes from 1 to 4.",
        "NL": "Assume that there are four vertex in a cycle."
    },
    {
        "CNL": "4 is bound.",
        "NL": "There is a bound with the number 4."
    },
    {
        "CNL": "Vtx 1 have an edge to Vtx X, where X is one of 2, 4.",
        "NL": "There is an edge between vertex 1 and vertex X, where X can be either one of 2, 4."
    },
    {
        "CNL": "Vtx 3 have an edge to Vtx 2.",
        "NL": "There is an edge between vertex 3 and vertex 2."
    },
    {
        "CNL": "Vtx 4 have an edge to Vtx 3.",
        "NL": "There is an edge between vertex 4 and vertex 3."
    },
    {
        "CNL": "Vtx X have an arc to Vtx Y when Vtx X have an edge to Y.",
        "NL": "The vertex X has an arc to the vertex Y while the vertex X has an edge to the vertex Y."
    },
    {
        "CNL": "Vtx Y have an arc to Vtx X when Vtx X have an edge to Y.",
        "NL": "The vertex Y has an arc to the vertex X while the vertex X has an edge to the vertex Y."
    },
    {
        "CNL": "Whenever there is a arc with first vtx X, with second vtx Y, whenever there is a bound with first vtx X, then we must have a in_hm with id1 X, with id2 Y or out_hm with first vtx X, with second vtx Y.",
        "NL": "Whenever there is an arc with first vertex X, with second vertex Y, whenever there is a bound with first vertex X, there must be an in_hm with id X, with id Y, or an out_hm with first vertex X, with second vertex Y."
    },
    {
        "CNL": "Whenever there is a arc with first vtx X, with second vtx Y, whenever there is a reached with first vtx X, then we must have a in_hm with id1 X, with id2 Y or out_hm with first vtx X, with second vtx Y.",
        "NL": "Whenever there is an arc with first vertex X, with second vertex Y, whenever there is a reached with first vertex X, there must be an in_hm with id X, with id Y, or an out_hm with first vertex X, with second vertex Y."
    },
    {
        "CNL": "Whenever there is an in_hm with id2 Y then we must have a reached with value Y.",
        "NL": "Whenever there is an in_hm with id Y there must be a reached with vertex X."
    },
    {
        "CNL": "It is prohibited that the number of id2 Y of in_hm with id1 X, with id2 Y is different from 1, whenever there is a vtx X.",
        "NL": "It is prohibited that the number of id Y of in_hm with id X and id Y may differ from 1 whenever there is a vertex X in the cycle."
    },
    {
        "CNL": "It is prohibited that the number of id1 X of in_hm with id1 X, with id2 Y is different from 1, whenever there is a vtx Y.",
        "NL": "It is prohibited that the number of id X of in_hm with id X and id Y may differ from 1 whenever there is a vertex Y in the cycle."
    },
    {
        "CNL": "It is required that when Vtx X is not reached then Vtx X is not vtx.",
        "NL": "There is a requirement that when vertex X is not reached, then vertex X is the vertex."
    },
    {
        "CNL": "Whenever there is a in_hm with id1 X, with id2 Y, whenever there is an edge with first vtx X, with second vtx Y, then we must have a hc with first vtx X, with second vtx Y.",
        "NL": "When there is an in_hm with id X, with id Y, whenever there is an edge with first vertex X, with second vertex Y, there must be a hc with first vertex X, with second vertex Y."
    },
    {
        "CNL": "Whenever there is a in_hm with id1 Y, with id2 X, whenever there is an edge with first vtx X, with second vtx Y, then we must have a hc with first vtx X, with second vtx Y.",
        "NL": "When there is a in_hm with id Y, with id X, whenever there is an edge with first vertex X, with second vertex Y, there must must be a hc with first vertex X, with second vertex Y."
    },
    {
        "CNL": "vtx X have a hc vtx Y when vtx X have a in_hm vtx Y and also vtx X have a edge vtx Y.",
        "NL": "The vertex X has a HC vertex Y when the vertex X has an in_hm vertex Y and also when the vertex X has an edge vertex Y."
    },
    {
        "CNL": "vtx X have a hc vtx Y when vtx Y have a in_hm vtx X and also vtx X have a edge vtx Y.",
        "NL": "The vertex X has a HC vertex Y when the vertex Y has an in_hm vertex X and also when the vertex X has an edge vertex Y."
    },
    {
        "CNL": "A Vtx goes from 1 to 4.",
        "NL": "Assume that there are four vertex in a path."
    },
    {
        "CNL": "4 is bound.",
        "NL": "There is a bound with the number 4."
    },
    {
        "CNL": "10 is maxweight.",
        "NL": "There is a maxweight with the number 10."
    },
    {
        "CNL": "Vtx 1 have an edge to Vtx X, where X is one of 2, 4.",
        "NL": "There is an edge between vertex 1 and vertex X, where X can be either one of 2, 4."
    },
    {
        "CNL": "Vtx 3 have an edge to Vtx 2.",
        "NL": "There is an edge between vertex 3 and vertex 2."
    },
    {
        "CNL": "Vtx 4 have an edge to Vtx 3.",
        "NL": "There is an edge between vertex 4 and vertex 3."
    },
    {
        "CNL": "Vtx 1 have an edgewt to Vtx 2 and weight 2.",
        "NL": "There is an edgewt between vertex 1 and vertex 2 having a weight of 2."
    },
    {
        "CNL": "Vtx 2 have an edgewt to Vtx 1 and weight 2.",
        "NL": "There is an  edgewt between vertex 2 and vertex 1 having a weight of 2."
    },
    {
        "CNL": "Vtx 2 have an edgewt to Vtx 3 and weight 3.",
        "NL": "There is an  edgewt between vertex 2 and vertex 3 having a weight of 3."
    },
    {
        "CNL": "Vtx 3 have an edgewt to Vtx 2 and weight 3.",
        "NL": "There is an  edgewt between vertex 3 and vertex 2 having a weight of 3."
    },
    {
        "CNL": "Vtx 3 have an edgewt to Vtx 4 and weight 1.",
        "NL": "There is an edgewt between vertex 3 and vertex 4 having a weight of 1."
    },
    {
        "CNL": "Vtx 4 have an edgewt to Vtx 3 and weight 1.",
        "NL": "There is an edgewt between vertex 4 and vertex 3 having a weight of 1."
    },
    {
        "CNL": "Vtx 1 have an edgewt to Vtx 4 and weight 3.",
        "NL": "There is an edgewt between vertex 1 and vertex 4 having a weight of 3."
    },
    {
        "CNL": "Vtx 4 have an edgewt to Vtx 1 and weight 3.",
        "NL": "There is an edgewt between vertex 4 and vertex 1 having a weight of 3."
    },
    {
        "CNL": "Vtx 4 have an edgewt to Vtx 1 and weight 3.",
        "NL": "There is an edgewt between vertex 4 and vertex 1 having a weight of 3."
    },
    {
        "CNL": "Vtx X have an arc to Vtx Y when Vtx X have an edge to Y.",
        "NL": "The vertex X has an arc to the vertex Y while the vertex X has an edge to the vertex Y."
    },
    {
        "CNL": "Vtx Y have an arc to Vtx X when Vtx X have an edge to Y.",
        "NL": "The vertex Y has an arc to the vertex X while the vertex X has an edge to the vertex Y."
    },
    {
        "CNL": "Whenever there is a arc with first vtx X, with second vtx Y, whenever there is a bound with first vtx X, then we must have a in_hm with id1 X, with id2 Y or out_hm with first vtx X, with second vtx Y.",
        "NL": "Whenever there is an arc with first vertex X, with second vertex Y, whenever there is a bound with first vertex X, there must be an in_hm with id X, with id Y, or an out_hm with first vertex X, with second vertex Y."
    },
    {
        "CNL": "Whenever there is a arc with first vtx X, with second vtx Y, whenever there is a reached with first vtx X, then we must have a in_hm with id1 X, with id2 Y or out_hm with first vtx X, with second vtx Y.",
        "NL": "Whenever there is an arc with first vertex X, with second vertex Y, whenever there is a reached with first vertex X, there must be an in_hm with id X, with id Y, or an out_hm with first vertex X, with second vertex Y."
    },
    {
        "CNL": "Whenever there is an in_hm with id2 Y then we must have a reached with value Y.",
        "NL": "Whenever there is an in_hm with id Y there must be a reached with vertex X."
    },
    {
        "CNL": "It is prohibited that the number of id2 Y of in_hm with id1 X, with id2 Y is different from 1, whenever there is a vtx X.",
        "NL": "It is prohibited that the number of id Y of in_hm with id X and id Y may differ from 1 whenever there is a vertex X in the cycle."
    },
    {
        "CNL": "It is prohibited that the number of id1 X of in_hm with id1 X, with id2 Y is different from 1, whenever there is a vtx Y.",
        "NL": "It is prohibited that the number of id X of in_hm with id X and id Y may differ from 1 whenever there is a vertex Y in the cycle."
    },
    {
        "CNL": "It is required that when Vtx X is not reached then Vtx X is not vtx.",
        "NL": "There is a requirement that when vertex X is not reached, then vertex X is the vertex."
    },
    {
        "CNL": "Whenever there is a in_hm with id1 X, with id2 Y, whenever there is an edge with first vtx X, with second vtx Y, then we must have a hc with first vtx X, with second vtx Y.",
        "NL": "When there is an in_hm with id X, with id Y, whenever there is an edge with first vertex X, with second vertex Y, there must be a hc with first vertex X, with second vertex Y."
    },
    {
        "CNL": "Whenever there is a in_hm with id2 Y, with second vtx X, whenever there is an edge with first vtx X, with second vtx Y, then we must have a hc with first vtx X, with second vtx Y.",
        "NL": "When there is a in_hm with id Y, with id X, whenever there is an edge with first vertex X, with second vertex Y, there must must be a hc with first vertex X, with second vertex Y."
    },
    {
        "CNL": "vtx X have a hc vtx Y when vtx X have a in_hm vtx Y and also vtx X have a edge vtx Y.",
        "NL": "The vertex X has a HC vertex Y when the vertex X has an in_hm vertex Y and also when the vertex X has an edge vertex Y."
    },
    {
        "CNL": "vtx X have a hc vtx Y when vtx Y have a in_hm vtx X and also vtx X have a edge vtx Y.",
        "NL": "The vertex X has a HC vertex Y when the vertex Y has an in_hm vertex X and also when the vertex X has an edge vertex Y."
    },
    {
        "CNL": "It is required that the total of id X of hc with value X, with id Y is less than or equal to M, such that there is a edgewt with first vtx X, with second vtx Y, with third weight W, whenever there is a maxweight with value M.",
        "NL": "It is necessary that the total number of id X of HC with value X, with value Y is less than or equal to M, so that there is an edgewt with the first vertex X, with the second vertex Y, and with the third weight W, whenever there is a maxweight value M."
    },
    {
        "CNL": "A vertex goes from 1 to 4.",
        "NL": "Assume that there are four vertex in a ham path."
    },
    {
        "CNL": "1 is start.",
        "NL": "There is a start with the number 1."
    },
    {
        "CNL": "Vertex 1 have an edge to Vertex X, where X is one of 2, 4.",
        "NL": "There is an edge between vertex 1 and vertex X, where X can be either one of 2, 4."
    },
    {
        "CNL": "Vertex 3 have an edge to Vertex 2.",
        "NL": "There is an edge between vertex 3 and vertex 2."
    },
    {
        "CNL": "Vertex 4 have an edge to Vertex 3.",
        "NL": "There is an edge between vertex 4 and vertex 3."
    },
    {
        "CNL": "Whenever there is a start with node X, whenever there is an edge with first node X, and with second node Y, whenever there is not an outpath with first node X, and with second node Y, then there must be an inpath with first node X, and with second node Y.",
        "NL": "A start point with node X, an edge with first node X, and an edge with second node Y need to be present, and even when there is no out path with first node X, and no outpath with second node Y, there must be an inpath with first node X, and with second node Y."
    },
    {
        "CNL": "Whenever there is a start with node X, whenever there is an edge with first node X, and with second node Y, whenever there is not an inpath with first node X, and with second node Y, then there must be an outpath with first node X, and with second node Y.",
        "NL": "A start point with node X, an edge with first node X, and an edge with second node Y need to be present, and even when there is no in path with first node X, and no inpath with second node Y, there must be an outpath with first node X, and with second node Y."
    },
    {
        "CNL": "Whenever there is a reached with node X, whenever there is an edge with first node X, and with second node Y, whenever there is not an outpath with first node X, and with second node Y, then there must be an inpath with first node X, and with second node Y.",
        "NL": "A reached point with node X, an edge with first node X, and an edge with second node Y need to be present, and even when there is no outpath with first node X, and with second node Y, there must be an inpath with first node X, and with second node Y."
    },
    {
        "CNL": "Whenever there is a reached with node X, whenever there is an edge with first node X, and with second node Y, whenever there is not an inpath with first node X, and with second node Y, then there must be an outpath with first node X, and with second node Y.",
        "NL": "A reached point with node X, an edge with first node X, and an edge with second node Y need to be present, and even when there is no in path with first node X, and with second node Y, there must be an out path with first node X, and with second node Y."
    },
    {
        "CNL": "edge X have an inPath to edge Y when node X is start and also node X have an edge to Y and also edge X have not outpath edge Y.",
        "NL": "There is an inpath from edge X to edge Y when node X is started, and there is also an edge from X to edge Y, but there is not an outpath from edge X to edge Y."
    },
    {
        "CNL": "edge X have an outPath to edge Y when node X is start and also node X have an edge to Y and also edge X have not inpath edge Y.",
        "NL": "There is an outpath from edge X to edge Y when node X is started, and there is also an edge from X to edge Y, but there is not an inpath from edge X to edge Y."
    },
    {
        "CNL": "edge X have an inPath to edge Y when node X is reached and also node X have an edge to Y and also edge X have not outPath edge Y.",
        "NL": "There is an inpath from edge X to edge Y when node X is reached, and there is also an edge from X to edge Y, but there is not an outpath from edge X to edge Y."
    },
    {
        "CNL": "edge X have an outPath to edge Y when node X is reached and also node X have an edge to Y and also edge X have not inpath edge Y.",
        "NL": "There is an outpath from edge X to edge Y when node X is reached, and there is also an edge from X to edge Y, but there is not an inpath from edge X to edge Y."
    },
    {
        "CNL": "It is required that Y is equal to Y1, whenever there is an inpath with first node X, and with second node Y, whenever there is an inpath with first node X, and with second node Y1.",
        "NL": "The requirement is that Y must not be equal to Y1, whenever there is an inpath with the first node X, and with the second node Y1, whenever there is an inpath with the first node X, and with the second node Y."
    },
    {
        "CNL": "It is required that X is equal to X1, whenever there is an inpath with first node X, and with second node Y, whenever there is an inpath with first node X1, and with second node Y.",
        "NL": "The requirement is that X must not be equal to X1, whenever there is an inpath with the first node X1, and with the second node Y, whenever there is an inpath with the first node X, and with the second node Y1."
    },
    {
        "CNL": "It is prohibited that there is a vertex with node X, whenever there is not a reached with node X, whenever there is not a start with node X.",
        "NL": "There is a prohibition that there is a vertex with node X whenever there is not a reached  with node X, whenever there is not a start  with node X."
    },
    {
        "CNL": "Whenever there is an inpath with second node X, then there must be a reached with node X.",
        "NL": "A reached node X must be present whenever there is an inpath with second node X."
    },
    {
        "CNL": "Vtx X is reached when Vtx Dummy have an inpath vtx X.",
        "NL": "The vertex X is reached when the vertex Dummy has an inpath to the vertex X."
    },
    {
        "CNL": "A Vtx goes from 1 to 8.",
        "NL": "Assume that there are eight vertex in a cluster."
    },
    {
        "CNL": "Vtx 8 have an edge to Vtx X, where X is one of 1, 5, 6.",
        "NL": "Vertex 8 has an edge over vertex X, where vertex X is one of the following: 1, 5, or 6."
    },
    {
        "CNL": "Vtx 7 have an edge to Vtx X, where X is one of 6, 5, 4.",
        "NL": "Vertex 7 has an edge over vertex X, where vertex X is one of the following: 6, 5, or 4."
    },
    {
        "CNL": "Vtx 6 have an edge to Vtx X, where X is one of 5, 1.",
        "NL": "Vertex 6 has an edge over vertex X, where X is one of the number 5 and 1."
    },
    {
        "CNL": "Vtx 3 have an edge to Vtx X, where X is one of 5, 1.",
        "NL": "Vertex 3 has an edge over vertex X, where X is one of the number 5 and 1."
    },
    {
        "CNL": "Vtx 5 have an edge to Vtx X, where X is one of 2, 1.",
        "NL": "Vertex 5 has an edge over vertex X, where X is one of the number 2 and 1."
    },
    {
        "CNL": "Vtx 4 have an edge to Vtx 2.",
        "NL": "There is a vertex 4 have an edge to vertex 2."
    },
    {
        "CNL": "2 is bound.",
        "NL": "There is a bound with the number 2."
    },
    {
        "CNL": "A levels goes from 1 to 3.",
        "NL": "Levels are from 1 to 3."
    },
    {
        "CNL": "Vtx U have an uedge to Vtx V when Vtx U have an edge to V, where U is less than V. ",
        "NL": "There is a condition in which node U is uedge from node V when node U is edge to node V, and U is less than V."
    },
    {
        "CNL": "Vtx U have an uedge to Vtx V when Vtx V have an edge to U, where U is less than V. ",
        "NL": "There is a condition in which node U is uedge from node V when node V is edge to node U, and U is less than V."
    },
    {
        "CNL": "whenever there is a vtx U then we can have levelvtx with value L, and with id U exactly 1 level L.",
        "NL": "We can always have a level vertex with value L, and with id U exactly 1 level L, whenever there is a vertex U."
    },
    {
        "CNL": "Whenever there is a levelvtx with value L greater than 1, with id U, then we can have exactly 1 parentedge with first id P, with second id U such that there is a uedge with first id P, with second id U, or a parentedge with first id P, with second id U such that there is an uedge with first id U, with second id P.",
        "NL": "Whenever a levelvtx has a value L greater than 1, with id U, we can have exactly one parentedge with first id P, second id U, such that there is an uedge with first id P, second id U, or a parentedge with first id P, with second id U, such that there is an uedge with first id U, with second id P."
    },
    {
        "CNL": "It is required that there is a levelvtx with value L-1, and with id P, whenever there is an parentedge with first id P, and with second id V, whenever there is a levelvtx with value L, and with id V.",
        "NL": "The requirement that there is a levelvtx with value L-1, and with id P, whenever there is a parentedge with first id P, and with second id V, whenever there is a levelvtx with value L, and with id V, must be met."
    },
    {
        "CNL": "It is required that the number of second id U of parentedge with first id P, with second id U is less than or equal to B, such that there is a vtx U, whenever there is a bound with value B, whenever there is a vtx P.",
        "NL": "It is defined that the number of second id U of the parentedge with first id P, with second id U, is less than or equal to B, so there is a vtx U whenever there is a bound with value B, whenever there is a vtx P."
    },
    {
        "CNL": "It is required that the number of id U of levelvtx with value equal to 1, with id U is less than or equal to B, such that there is a vtx U, whenever there is a bound with value B.",
        "NL": "The requirement is that not all the number of id U of the levelvtx has a value equal to 1, with id U less than or equal to B, when there is a vtx U, that has a bound of value B."
    },
    {
        "CNL": "It is required that V is less than or equal to U, whenever there is an parentedge with first id P, and with second id V, whenever there is an parentedge with first id P, and with second id U, whenever there is not uedge with first id U, and with second id V.",
        "NL": "The requirement is that, whenever there is a parentedge with id P and with id V, and also a parentedge with id P and id U, when there is not an uedge with id U and id V, satisfying id U is always less than id V."
    },
    {
        "CNL": "It is required that V is less than or equal to U, whenever there is an Levelvtx with value equal to 1, and with id V, whenever there is an Levelvtx with value equal to 1, and with id U, whenever there is not uedge with first id U, and with second id V.",
        "NL": "The requirement is that, whenever there is a levelvtx with value 1 and with id V, and also a levelvtx with value 1 and id U, when there is not an uedge with id U and id V, satisfying id U is always less than id V."
    },
    {
        "CNL": "A Vtx goes from 1 to 8.",
        "NL": "Assume that there are eight vertex in a partition."
    },
    {
        "CNL": "Vtx 1 have an edge to Vtx X, where X is one of 2, 4, 5.",
        "NL": "There is an edge between vertex 1 and vertex 2, as well as the other vertices 4 and 5."
    },
    {
        "CNL": "Vtx 2 have an edge to Vtx X, where X is one of 3, 5.",
        "NL": "There is an edge between vertex 2 and vertex 3 as well as vertex 5."
    },
    {
        "CNL": "Vtx 3 have an edge to Vtx 1.",
        "NL": "There is an edge between vertex 3 and vertex 1."
    },
    {
        "CNL": "Vtx 4 have an edge to Vtx X, where X is one of 2, 3, 5.",
        "NL": "There is an edge between vertex 4 and vertex 2, as well as the other vertices 3 and 5."
    },
    {
        "CNL": "Vtx 5 have an edge to Vtx 3.",
        "NL": "There is an edge between vertex 5 and vertex 3."
    },
    {
        "CNL": "A parts goes from 1 to 3.",
        "NL": "Assume that there are three parts."
    },
    {
        "CNL": "3 is vtxbound.",
        "NL": "There is a vtxbound to 3."
    },
    {
        "CNL": "4 is edgebound.",
        "NL": "The edgebound is number 4."
    },
    {
        "CNL": "Vtx U have an uedge to Vtx V when Vtx U have an edge to V, where U is less than V. ",
        "NL": "There is a condition in which node U is uedge from node V when node U is edge to node V, and U is less than V."
    },
    {
        "CNL": "Vtx U have an uedge to Vtx V when Vtx V have an edge to U, where U is less than V. ",
        "NL": "There is a condition in which node U is uedge from node V when node V is edge to node U, and U is less than V."
    },
    {
        "CNL": "Whenever there is a uedge with id1 U, with id2 V, whenever there is an weight_edgewt with first vtx U, with second vtx V, with third weight W, then we must have a u_edge with id1 U, with id2 V, with id3 W.",
        "NL": "Whenever there is an uedge with id U, with id V, whenever there is an edge_weight with third weight W, with first vertex U, with second vertex V, there must be an uedge with id U, with id V, with  weight W."
    },
    {
        "CNL": "Whenever there is a uedge with id1 U, with id2 V, whenever there is an weight_edgewt with first vtx V, with second vtx U, with third weight W, then we must have a u_edge with id1 U, with id2 V, with id3 W.",
        "NL": "Whenever there is an undirected edge with id U and id V, whenever there is an edge weight with weight W, with first vertex V, and with second vertex U, there must be an undirected edge with id U, with id V, with weight W."
    },
    {
        "CNL": "vtx U have a u_edge vtx V and vtx W when vtx U have uedge vtx V and also vtx U have weight_wtedge vtx V and vtx W.",
        "NL": "Vertex U have an uedge vertex V and weight W when vertex  U have an uedge vertex V and also vertex U have a weight_wtedge vertex V and weight W."
    },
    {
        "CNL": "vtx U have a u_edge vtx V and vtx W when vtx U have uedge vtx V and also vtx V have weight_wtedge vtx U and vtx W.",
        "NL": "Vertex U have an uedge vertex V and weight W when vertex  U have an uedge vertex V and also vertex V have a weight_wtedge vertex U and weight W."
    },
    {
        "CNL": "Whenever there is a part with value K, whenever there is a vtxbound with value V, then we can have between 1 and V partition with value U, and with id K such that there is a vtx U.",
        "NL": "We can always have a partition with value U and value K ranging between 1 and V with vertex U, whenever we have parts K and vtxbound V."
    },
    {
        "CNL": "Whenever there is a vtx U, then we can have exactly 1 partition with value U, and with id K such that there is a part K.",
        "NL": "We can always have a partition with value U and id K exactly 1 part K, whenever there is a vertex U."
    },
    {
        "CNL": "Whenever there is a part K, whenever there is a vtxbound with value V, then we can have between 1 and V partition with value U, and with id K such that there is a vtx U.",
        "NL": "We can always have a partition with value U and value K ranging between 1 and V with vertex U, whenever we have parts K and vertex bound V."
    },
    {
        "CNL": "Every vtx U can be partition exactly 1 part K.",
        "NL": "There is exactly one part K for every vertex U that can be partitioned."
    },
    {
        "CNL": "Whenever there is a uedge with id1 U, with id2 V, whenever there is an partition with value U, with id  X,  whenever there is an partition with value V, with id  Y, and with id Y greater than X, then we must have a adjacent with id1 U, with id2 V, with id3 X, with id4 Y.",
        "NL": "Whenever there is an uedge with id U and id V, having a partition with id U, with id X, and partition with id V and with id Y, considering X is less than Y, then we must have an adjacent with id U, id V, id X, and with id Y."
    },
    {
        "CNL": "Whenever there is a uedge with id1 U, with id2 V, whenever there is an partition with value U, with id  Y,  whenever there is an partition with value V, with id  X, and with id X less than Y, then we must have a adjacent with id1 U, with id2 V, with id3 X, with id4 Y.",
        "NL": "Whenever there is an uedge with id U and id V, having a partition with id U, with id Y, and partition with id V and with id X, considering X is less than Y, then we must have an adjacent with id U, id V, id X, and with id Y."
    },
    {
        "CNL": "Whenever there is a uedge with value U, with id V, whenever there is a reach with id1 K, with id2 U, whenever there is a partition with value V, with id K then we must have a reach with id1 K, with id2 V. ",
        "NL": "Whenever there is an uedge with id U and id V, having a reach with id K, with id U, and partition with id V and with id X, then we must have a reach with id K, id V."
    },
    {
        "CNL": "Whenever there is a uedge with value V, with id U, whenever there is a reach with id1 K, with id2 U, whenever there is a partition with value V, with id K then we must have a reach with id1 K, with id2 V. ",
        "NL": "Whenever there is an uedge with id V and id U, having a reach with id K, with id U, and partition with id V and with id X, then we must have a reach with id K, id V."
    },
    {
        "CNL": "vtx K have a reach vtx V when vtx U uedge vtx V and also vtx K reach vtx U and also vtx V partition vtx K.",
        "NL": "The vertex K reaches vertex V when vertex U has an uedge vertex V and there is a reach with vertex K and vertex U also there is a partition between vertex V and vertex K."
    },
    {
        "CNL": "vtx K have a reach vtx V when vtx V uedge vtx U and also vtx K reach vtx U and also vtx V partition vtx K.",
        "NL": "The vertex K reaches vertex V when vertex V has an uedge vertex U and there is a reach with vertex K and vertex U also there is a partition between vertex V and vertex K."
    },
    {
        "CNL": "It is required that there is a reach with id1 K, and with id2 U, whenever there is a partition with value U, and with id K.",
        "NL": "There is a prohibition that there is a partition with id U, and with id K, and there is not a reach with value K, and with value U."
    },
    {
        "CNL": "whenever there is an partition with value U, with id K, whenever there is an partition with value V, with id K, whenever there is an vtx with id V, and with id V less than U, then we must have a existsless with id1 U, with id2 K.",
        "NL": "Whenever there is a partition with value U and id K, and a partition with value V and id K, with a vtx id V, considering id V is less than U, then we must have a existsless with id1 U, id2 K."
    },
    {
        "CNL": "whenever there is an partition with value U, with id K, whenever there is not an existsless with id1 U, with id2 K, then we must have a reach with id1 K, and with id2 U.",
        "NL": "Whenever there is a partition with value U and id K, that does not existsless with id1 U and id2 K, then we must have a reach with id1 K and id2 U."
    },
    {
        "CNL": "Whenever there is a uedge with value U, with id V, whenever there is a reach with id1 K, with id2 U, whenever there is a partition with value V, with id K then we must have a reach with id1 K, with id2 V. ",
        "NL": "Whenever there is an uedge with value U and id V, having a reach with id1 K, with id2 U, and partition with value V and with id K, then we must have a reach with id1 K, id2 V."
    },
    {
        "CNL": "Whenever there is a uedge with value V, with id U, whenever there is a reach with id1 K, with id2 U, whenever there is a partition with value V, with id K then we must have a reach with id1 K, with id2 V. ",
        "NL": "Whenever there is an uedge with value V and id U, having a reach with id1 K, with id2 U, and partition with value V and with id K, then we must have a reach with id1 K, id2 V."
    },
    {
        "CNL": "vtx U have a existslesss vtx K when vtx U have a partition vtx K and also vtx V have a partition vtx K and also vtx V is Vtx, where V is less than U.",
        "NL": "A vertex U has an existless vertex K when it has a partition vertex K, and also vertex V has a partition vertex K, and also vertex V is Vtx, where V is less than U."
    },
    {
        "CNL": "vtx K have a reach vtx U when vtx U have a partition vtx K and also vtx U have a not existslesss vtx K.",
        "NL": "There is a reach between vertex U and vertex K when vertex U has a partition with vertex K, as well as a not existsless vertex U and vertex K."
    },
    {
        "CNL": "vtx K have a reach vtx V when vtx U uedge vtx V and also vtx K reach vtx U and also vtx V partition vtx K.",
        "NL": "The vertex K reaches vertex V when vertex U has an uedge vertex V and there is a reach with vertex K and vertex U also there is a partition between vertex V and vertex K."
    },
    {
        "CNL": "vtx K have a reach vtx V when vtx V uedge vtx U and also vtx K reach vtx U and also vtx V partition vtx K.",
        "NL": "The vertex K reaches vertex V when vertex V has an uedge vertex U and there is a reach with vertex K and vertex U also there is a partition between vertex V and vertex K."
    },
    {
        "CNL": "It is required that there is a reach with id1 K, and with id2 U, whenever there is a partition with value U, and with id K.",
        "NL": "There is a prohibition that there is a partition with value U, and with id K, and there is not a reach with id1  K, and with id2 U. "
    },
    {
        "CNL": "A node goes from 1 to 4.",
        "NL": "Assume that there are four vertex in a path."
    },
    {
        "CNL": "1 is start.",
        "NL": "The first number represents the start."
    },
    {
        "CNL": "Vtx 1 have an edge to Vtx 2 and weight 2.",
        "NL": "There is an edge between vertex 1 and vertex 2 with a weight of 2."
    },
    {
        "CNL": "Vtx 2 have an edge to Vtx 3 and weight 3.",
        "NL": "There is an edge between vertex 2 and vertex 2 with a weight of 3."
    },
    {
        "CNL": "Vtx 3 have an edge to Vtx 4 and weight 1.",
        "NL": "There is an edge between vertex 3 and vertex 2 with a weight of 1."
    },
    {
        "CNL": "Vtx 4 have an edge to Vtx 1 and weight 3.",
        "NL": "There is an edge between vertex 4 and vertex 2 with a weight of 3."
    },
    {
        "CNL": "Whenever there is an edge with first vtx X, with second vtx Y, then we must have a inPath with first vtx X, with second vtx Y or outPath  with first vtx X, with second vtx Y.",
        "NL": "As soon as there is an edge between the first vertex X and the second vertex  Y, then we need to have either an inPath with the first vertex  X and the second vertex  Y, or an outPath with the first vertex  X and the second vertex  Y."
    },
    {
        "CNL": "It is prohibited that there is an inPath with first vtx X, with second vtx Y1, whenever there is a inPath  with first vtx X, with second vtx Y different from Y1.",
        "NL": "It is prohibited to establish an inPath with first vertex X and second vertex Y whenever there is an inPath with first vertex X and second vertex Y1, where Y is not equal to Y1."
    },
    {
        "CNL": "It is prohibited that there is an inPath  with first vtx X1 different from X, with second vtx Y, whenever there is a inPath with first vtx X, with second vtx Y.",
        "NL": "It is prohibited to establish an inPath with first vertex X and second vertex Y whenever there is an inPath with first vertex X1 and second vertex Y, where X is not equal to X1."
    },
    {
        "CNL": "It is required that there is reached with id X, whenever there is a node X.",
        "NL": "There is a requirement that there is a node X that is not reached with the id X whenever there is a node X present."
    },
    {
        "CNL": "It is prohibited that there is a start Y, whenever there is a inPath with first vtx X, with second vtx Y.",
        "NL": "It is prohibited that there should be a start Y, whenever there is a inPath with first vertex X, and second vertex Y."
    },
    {
        "CNL": "node X is reached when node Y is reached and also node Y have an inPath node X.",
        "NL": "A node X is reached when node Y is reached, and also node Y has an inPath to node X."
    },
    {
        "CNL": "node X is reached when node X have a start.",
        "NL": "The node X is reached when the node X has started."
    },
    {
        "CNL": "It is preferred, with low priority, that whenever there is an inPath with first vtx X, with second vtx Y, whenever there is an edge with first vtx X, with second vtx Y, with third vtx C, C is minimized.",
        "NL": "It is preferred, though with low priority, that whenever there is an inPath between first vertex X and second vertex Y,  there is an edge between first vertex X and second vertex Y, with third vertex C,  the value of C is minimized."
    },
    {
        "CNL": "There is a vertex with id A.",
        "NL": "The vertex with the id A is present in the graph."
    },
    {
        "CNL": "There is a vertex with id B.",
        "NL": "The vertex with the id B is present in the graph."
    },
    {
        "CNL": "There is a vertex with id C.",
        "NL": "The vertex with the id C is present in the graph."
    },
    {
        "CNL": "There is a vertex with id D.",
        "NL": "The vertex with the id D is present in the graph."
    },
    {
        "CNL": "There is a vertex with id E.",
        "NL": "The vertex with the id E is present in the graph."
    },
    {
        "CNL": "a vertex A have an edge to vertex B.",
        "NL": "There is an edge between a vertex A and a vertex B."
    },
    {
        "CNL": "a vertex B have an edge to vertex C.",
        "NL": "There is an edge between a vertex B and a vertex C."
    },
    {
        "CNL": "a vertex C have an edge to vertex D.",
        "NL": "There is an edge between a vertex C and a vertex D."
    },
    {
        "CNL": "a vertex D have an edge to vertex E.",
        "NL": "There is an edge between a vertex D and a vertex E."
    },
    {
        "CNL": "a vertex E have an edge to vertex A.",
        "NL": "There is an edge between a vertex E and a vertex A."
    },
    {
        "CNL": "a vertex A have an edge to vertex E.",
        "NL": "There is an edge between a vertex A and a vertex E."
    },
    {
        "CNL": "a vertex D have an edge to vertex A.",
        "NL": "There is an edge between a vertex D and a vertex A."
    },
    {
        "CNL": "a vertex C have an edge to vertex E.",
        "NL": "There is an edge between a vertex C and a vertex E."
    },
    {
        "CNL": "There is a Init with id A.",
        "NL": "It is possible to find an Init with the id A."
    },
    {
        "CNL": "vertex V2 is No_In vertex V when vertex V1 is In vertex V and also vertex V2 is vertex, where V1 is different from V2.",
        "NL": "If vertex V1 is in vertex V and vertex V2 is vertex, where V1 differs from V2, then vertex V2 is No_In vertex V."
    },
    {
        "CNL": "vertex V is No_In vertex V2 when vertex V is In vertex V1 and also vertex V2 is vertex, where V1 is different from V2.",
        "NL": "If vertex V is in vertex V1 and vertex V2 is vertex, where V1 differs from V2, then vertex V is No_In vertex V2."
    },
    {
        "CNL": "vertex V2 is reached when vertex V1 is Init and also vertex V1 is In vertex V2.",
        "NL": "A vertex V2 is reached when vertex V1 is init, as well as when vertex V1 is IN a vertex V2."
    },
    {
        "CNL": "vertex V2 is reached when vertex V1 is reached and also vertex V1 is In vertex V2.",
        "NL": "A vertex V2 is reached when vertex V1 is reached, as well as when vertex V1 is IN a vertex V2."
    },
    {
        "CNL": "vertex V is no_reached when vertex V is vertex and also vertex V is not reached.",
        "NL": "A vertex V is no_reached when vertex V is vertex, as well as when vertex V is not reached."
    },
    {
        "CNL": "It is prohibited that there is no_reached with vertex X.",
        "NL": "It is forbidden to have a no_reach with vertex X."
    },
    {
        "CNL": "whenever there is an edge with first vtx V1, with second vtx V2, then we must have an In with first vtx V1, with second vtx V2 or no_In with first vtx V1, and with second vtx V2.",
        "NL": "Whenever there is an edge between the first vertex V1, and the second vertex V2, then there must either be an In between the first vertex V1, and the second vertex V2, or we must have a no_In between the first vertex V1, and the second vertex V2."
    }
]